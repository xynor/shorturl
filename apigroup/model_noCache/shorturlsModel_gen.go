// Code generated by goctl. DO NOT EDIT!

package model_noCache

import (
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"

	"github.com/SpectatorNan/gorm-zero/gormc/pagex"
	"gorm.io/gorm"
)

type (
	shorturlsModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Shorturls) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []Shorturls) error
		FindOne(ctx context.Context, id uint64) (*Shorturls, error)
		FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
			orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]Shorturls, int64, error)
		FindOneByShorten(ctx context.Context, shorten sql.NullString) (*Shorturls, error)
		Update(ctx context.Context, tx *gorm.DB, data *Shorturls) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Shorturls) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []Shorturls) error

		Delete(ctx context.Context, tx *gorm.DB, id uint64) error
	}

	defaultShorturlsModel struct {
		conn  *gorm.DB
		table string
	}

	Shorturls struct {
		Id        uint64         `gorm:"column:id;primary_key"`
		CreatedAt sql.NullTime   `gorm:"column:created_at"`
		UpdatedAt sql.NullTime   `gorm:"column:updated_at"`
		DeletedAt gorm.DeletedAt `gorm:"column:deleted_at;index"`
		Shorten   sql.NullString `gorm:"column:shorten"`
		Url       sql.NullString `gorm:"column:url"`
	}
)

func (Shorturls) TableName() string {
	return "`shorturls`"
}

func newShorturlsModel(db *gorm.DB) *defaultShorturlsModel {
	return &defaultShorturlsModel{
		conn:  db,
		table: "`shorturls`",
	}
}

func (m *defaultShorturlsModel) Insert(ctx context.Context, tx *gorm.DB, data *Shorturls) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&data).Error
	return err
}
func (m *defaultShorturlsModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []Shorturls) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.Create(&news).Error
	return err
}

func (m *defaultShorturlsModel) FindOne(ctx context.Context, id uint64) (*Shorturls, error) {
	var resp Shorturls
	err := m.conn.WithContext(ctx).Model(&Shorturls{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultShorturlsModel) FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
	orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]Shorturls, int64, error) {
	conn := m.conn
	formatDB := func() (*gorm.DB, *gorm.DB) {
		db := conn.Model(&Shorturls{})
		if whereClause != nil {
			db = whereClause(db)
		}
		return db, nil
	}

	res, total, err := pagex.FindPageListWithCount[Shorturls](ctx, page, orderBy, orderKeys, formatDB)
	return res, total, err
}

func (m *defaultShorturlsModel) FindOneByShorten(ctx context.Context, shorten sql.NullString) (*Shorturls, error) {
	var resp Shorturls
	err := m.conn.WithContext(ctx).Model(&Shorturls{}).Where("`shorten` = ?", shorten).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShorturlsModel) Update(ctx context.Context, tx *gorm.DB, data *Shorturls) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultShorturlsModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Shorturls) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultShorturlsModel) Delete(ctx context.Context, tx *gorm.DB, id uint64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&Shorturls{}, id).Error

	return err
}

func (m *defaultShorturlsModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []Shorturls) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.Delete(&datas).Error
	return err
}
